#!/usr/bin/env python3
import json
import os
from openai import OpenAI
from PyPDF2 import PdfReader

# Initialize OpenAI client
client = OpenAI(
    base_url="http://localhost:8080/v1",  # Adjust API server details if necessary
    api_key="sk-no-key-required"
)

# Define the grammar rules for JSON formatting
GRAMMAR_RULES = """
space ::= " "?
number ::= ("-"? ([0-9] | [1-9] [0-9]*)) ("." [0-9]+)? ([eE] [-+]? [0-9]+)? space
string ::= "\"" (
        [^"\\] |
        "\\" (["\\/bfnrt] | "u" [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F])
      )* "\"" space
person ::= "{" space "\"geburtsdatum\"" space ":" space string "," space "\"name\"" space ":" space string "}" space
root ::= "{" space "\"aktivwert\"" space ":" space number "," space "\"gesellschaft\"" space ":" space string "," space "\"person\"" space ":" space person "," space "\"vertragsnummer\"" space ":" space string "}" space
"""

def extract_text_from_pdf(pdf_path):
    """Extracts text from each page of a PDF and returns a list of texts (one per page)."""
    reader = PdfReader(pdf_path)
    return [page.extract_text() for page in reader.pages]

def process_texts(texts, output_dir):
    """Sends each text chunk to LLaMA.cpp and saves JSON output per page."""
    os.makedirs(output_dir, exist_ok=True)  # Ensure the output directory exists
    
    for i, text in enumerate(texts):
        if not text.strip():
            continue  # Skip empty pages
        
        print(f"Processing page {i + 1}...")  # Debugging
        
        completion = client.chat.completions.create(
            model="LLaMA_CPP",
            messages=[
                {"role": "system", "content": f"Du bist ein AI Assistent, der Texte in JSON umwandelt. Halte dich strikt an folgende JSON-Grammatik:\n\n{GRAMMAR_RULES}"},
                {"role": "user", "content": text}
            ]
        )
        
        response_text = completion.choices[0].message.content
        
        # Remove markdown-style JSON formatting (triple backticks)
        if response_text.startswith("```json"):
            response_text = response_text[7:]  # Remove the leading ```json
        if response_text.endswith("```"):
            response_text = response_text[:-3]  # Remove the trailing ```
        
        try:
            json_response = json.loads(response_text.strip())  # Strip extra spaces
        except json.JSONDecodeError:
            json_response = {"error": "Invalid JSON response", "response": response_text}
        
        # Save each page's JSON output separately
        output_file = os.path.join(output_dir, f"page_{i + 1}.json")
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(json_response, f, indent=4, ensure_ascii=False)

        print(f"Saved: {output_file}")


def main(pdf_path, output_dir):
    """Reads the PDF, processes each page, and saves results as separate JSON files."""
    texts_to_process = extract_text_from_pdf(pdf_path)
    process_texts(texts_to_process, output_dir)

if __name__ == "__main__":
    pdf_file_path = "path"  # Change this to your PDF file path
    output_directory = "C:/temp/output"  # Directory to save individual JSON files
    main(pdf_file_path, output_directory)



